{"data":{"markdownRemark":{"html":"<p>I gave a presentation last year on the Event Gateway for ColdFusion MX 7. John Lyons asked me to post the code for the CFC I used in my presentation to my blog.</p>\n<p>The way this code works is that it uses a File watcher event gateway to see if any files of type jpg are written to a folder specified in the Event Gateway. Here is the code for the CFC.</p>\n<div class=\"code\"><font color=\"MAROON\"><cfcomponent displayname=<font color=\"BLUE\">\"imageWatcher\"</font>></font>  \n<p> <font color=\"MAROON\">&#x3C;cffunction name=<font color=\"BLUE\">\"onAdd\"</font> access=<font color=\"BLUE\">\"public\"</font> returntype=<font color=\"BLUE\">\"void\"</font>></font><br>\n<font color=\"MAROON\">&#x3C;cfargument name=<font color=\"BLUE\">\"CFEvent\"</font> type=<font color=\"BLUE\">\"struct\"</font> required=<font color=\"BLUE\">\"true\"</font>></font><br>\n<font color=\"MAROON\"><cfset data=CFEvent.data></font>  </p>\n<p> <font color=\"MAROON\">&#x3C;cflog file=<font color=\"BLUE\">\"MydirWatcher\"</font> application=<font color=\"BLUE\">\"No\"</font> text=<font color=\"BLUE\">\"ACTION: #data.type#; FILE: #data.filename#; TIME: #timeFormat(data.lastmodified)#\"</font>></font><br>\n<font color=\"MAROON\"><cftry></font><br>\n<font color=\"MAROON\">&#x3C;cfset createThumbImage(data.filename) /></font><br>\n<font color=\"MAROON\">&#x3C;cfcatch type=<font color=\"BLUE\">\"any\"</font>></font><br>\n<font color=\"MAROON\">&#x3C;cfwddx action=<font color=\"BLUE\">\"cfml2wddx\"</font> input=<font color=\"BLUE\">\"#cfcatch#\"</font> output=<font color=\"BLUE\">\"myWDDX\"</font> /></font><br>\n<font color=\"MAROON\">&#x3C;cflog file=<font color=\"BLUE\">\"MydirWatcher\"</font> application=<font color=\"BLUE\">\"No\"</font> text=<font color=\"BLUE\">\"#myWDDX#\"</font>></font><br>\n<font color=\"MAROON\"></cfcatch></font><br>\n<font color=\"MAROON\"></cftry></font><br>\n<font color=\"MAROON\"></cffunction></font>  </p>\n<p> <font color=\"MAROON\">&#x3C;cffunction name=<font color=\"BLUE\">\"createThumbImage\"</font> access=<font color=\"BLUE\">\"public\"</font> returntype=<font color=\"BLUE\">\"void\"</font>></font><br>\n<font color=\"MAROON\">&#x3C;cfargument name=<font color=\"BLUE\">\"filepath\"</font> type=<font color=\"BLUE\">\"string\"</font> required=<font color=\"BLUE\">\"yes\"</font> /></font><br>\n<font color=\"MAROON\">&#x3C;cfset var imageName = <font color=\"BLUE\">\"Thumb\"</font> &#x26; getFileFromPath(arguments.filepath) /></font><br>\n<font color=\"MAROON\">&#x3C;cfset var ImageIOObj = CreateObject(<font color=\"BLUE\">\"Java\"</font>, <font color=\"BLUE\">\"javax.imageio.ImageIO\"</font>) /></font><br>\n<font color=\"MAROON\">&#x3C;cfset var FileInputStream = CreateObject(<font color=\"BLUE\">\"Java\"</font>, <font color=\"BLUE\">\"java.io.FileInputStream\"</font>) /></font><br>\n<font color=\"MAROON\">&#x3C;cfset var FileOutputStream = CreateObject(<font color=\"BLUE\">\"Java\"</font>, <font color=\"BLUE\">\"java.io.FileOutputStream\"</font>) /></font><br>\n<font color=\"MAROON\">&#x3C;cfset var newImage = createObject(<font color=\"BLUE\">\"java\"</font>, <font color=\"BLUE\">\"java.awt.image.BufferedImage\"</font>) /></font><br>\n<font color=\"MAROON\">&#x3C;cfset var AffineTransform = CreateObject(<font color=\"BLUE\">\"Java\"</font>, <font color=\"BLUE\">\"java.awt.geom.AffineTransform\"</font>) /></font><br>\n<font color=\"MAROON\">&#x3C;cfset var AffineTransformOp = CreateObject(<font color=\"BLUE\">\"Java\"</font>, <font color=\"BLUE\">\"java.awt.image.AffineTransformOp\"</font>) /></font><br>\n<font color=\"MAROON\"><cfset var width = 0 /></font><br>\n<font color=\"MAROON\"><cfset var height = 0 /></font><br>\n<font color=\"MAROON\"><cfset var imageType = 0 /></font>  </p>\n<p> <font color=\"GRAY\"><em>&#x3C;!--- Ideal ratio is 128 pixels by 128 pixels ---></em></font><br>\n<font color=\"MAROON\">&#x3C;cfset FileInputStream.init(arguments.filepath) /></font><br>\n<font color=\"MAROON\"><cfset Image = ImageIOObj.read(FileInputStream) /></font><br>\n<font color=\"MAROON\"><cfset width = Image.getWidth() /></font><br>\n<font color=\"MAROON\"><cfset height = Image.getHeight() /></font><br>\n<font color=\"MAROON\"><cfset imageRatio = height/width /></font>  </p>\n<p> <font color=\"GRAY\"><em>&#x3C;!--- Set the new dimensions for the thumbnail based on the image ratio. ---></em></font><br>\n<font color=\"MAROON\">&#x3C;cfif imageRatio GT<font color=\"BLUE\"> 1</font>></font><br>\n<font color=\"MAROON\"><cfset newHeight = 128 /></font><br>\n<font color=\"MAROON\">&#x3C;cfset newWidth = 128 * (width/height) /></font><br>\n<font color=\"MAROON\"><cfelse></font><br>\n<font color=\"MAROON\">&#x3C;cfset newHeight = 128 * (height/width) /></font><br>\n<font color=\"MAROON\"><cfset newWidth = 128 /></font><br>\n<font color=\"MAROON\"></cfif></font>  </p>\n<p> <font color=\"MAROON\">&#x3C;cfset pWidth = newWidth / Width /></font><br>\n<font color=\"MAROON\">&#x3C;cfset pHeight = newHeight / Height /></font>  </p>\n<p> <font color=\"MAROON\">&#x3C;cfset jwidth = javaCast(<font color=\"BLUE\">\"int\"</font>, newWidth) /></font><br>\n<font color=\"MAROON\">&#x3C;cfset jheight = javaCast(<font color=\"BLUE\">\"int\"</font>, newHeight) /></font><br>\n<font color=\"MAROON\"><cfset imageType = Image.getType() /></font>  </p>\n<p> <font color=\"MAROON\">&#x3C;cfset newImage.init(jwidth, jheight, imageType) /></font><br>\n<font color=\"MAROON\">&#x3C;cfset AffineTransform.scale(pWidth, pHeight) /></font><br>\n<font color=\"MAROON\">&#x3C;cfset AffineTransformOp.init(AffineTransform, AffineTransformOp.TYPE_BILINEAR) /></font><br>\n<font color=\"MAROON\">&#x3C;cfset AffineTransformOp.filter(Image, newImage) /></font>  </p>\n<p> <font color=\"MAROON\">&#x3C;cfset FileOutputStream.init(<font color=\"BLUE\">\"<a href=\"c:%5Cthumbnails\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">c:\\thumbnails</a>#imageName#\"</font>) /></font><br>\n<font color=\"MAROON\">&#x3C;cfset ImageIOObj.write(newImage, <font color=\"BLUE\">\"jpg\"</font>, FileOutputStream) /></font>  </p>\n<p> <font color=\"MAROON\">&#x3C;cfset Image.flush() /></font><br>\n<font color=\"MAROON\">&#x3C;cfset FileOutputStream.close() /></font>  </p>\n<p> <font color=\"MAROON\"></cffunction></font>  </p>\n<p> <font color=\"MAROON\"></cfcomponent></font></div>\nThis code uses the underlying Java libraries that are included with ColdFusion to resize the images.</p>\n<p>Doug Hughes has written an Image component that takes advantage of these underlying java libraries. I highly recommend that if you need to do image processing in your web app, that you take a look at some of the components that Doug sells at his company <a href=\"http://www.alagad.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Alagad</a>. He also sells a component for doing Capchas.</p>","frontmatter":{"title":"File Watcher Event gateway CFC for Jpeg thumbnail resizing","date":"17.01.2011","category":"Blog"},"timeToRead":3}},"pageContext":{"slug":"/file-watcher-event-gateway-cfc-for-jpeg-thumbnail-resizing","prev":{"fields":{"slug":"/first-coast-head-race"},"frontmatter":{"title":"First Coast Head Race","category":"Blog"}},"next":{"fields":{"slug":"/file-explorer-changes-in-cf-eclipse-causes-problems-in-flex-builder"},"frontmatter":{"title":"File Explorer changes in CFEclipse causes problems in Flex Builder","category":"Blog"}}}}
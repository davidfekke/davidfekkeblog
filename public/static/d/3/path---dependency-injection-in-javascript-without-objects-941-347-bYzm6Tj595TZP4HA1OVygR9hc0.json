{"data":{"markdownRemark":{"html":"<p>After programming in an object oriented way for 15 years, I am started to make the transition of programming in a more functional way\nwith languages like Javascript and Swift. Javascript has always treated functions as first class citizens, and their is a movement in\nthe Javascript community from developers such as Eric Elliot to never use the <code class=\"language-text\">new</code> keyword again.</p>\n<p>I recently upgraded an express site from 3 to version 4. As part of that process I decided to refactor the code that called external\nservices so they would be more testable and more loosely coupled. In languages such as Java and C# this can be achieved by using\n<a href=\"https://en.wikipedia.org/wiki/Dependency_injection\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dependency injection</a>. </p>\n<p>In express it is actually very easy to inject functionality into a route. This can be done by either using middleware or\ninjecting another function into a route.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> routes <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./routes/index'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">exposeService</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">,</span> resp<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    req<span class=\"token punctuation\">.</span>service <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./myservice'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> exposeService<span class=\"token punctuation\">,</span> routes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>For one of the routes I needed to be able to inject two services that could be used by the route. In an earlier version of the\ncombined service I created an object that had two properties that held references to other objects that had functions for\nreturning the data I needed in my route. Here is how I intially wrote the service as an object.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Creating function object</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Service</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Service</span><span class=\"token punctuation\">(</span>meetupdata<span class=\"token punctuation\">,</span> twitterdata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Meetup <span class=\"token operator\">=</span> meetupdata<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Twitter <span class=\"token operator\">=</span> twitterdata<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Prototype function for getting the next meeting</span>\nService<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getNextMeetup</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getNextMeetup</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Meetup<span class=\"token punctuation\">.</span><span class=\"token function\">getNextMeetup</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Prototype function for getting the tweets</span>\nService<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getTweets</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getTweets</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>Twitter<span class=\"token punctuation\">.</span><span class=\"token function\">getFeed</span><span class=\"token punctuation\">(</span>cb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// factory function for creating a new version of the object</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>meetupdata<span class=\"token punctuation\">,</span> twitterdata<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Service</span><span class=\"token punctuation\">(</span>meetupdata<span class=\"token punctuation\">,</span> twitterdata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> create<span class=\"token punctuation\">;</span></code></pre>\n      </div>\n<p>While this worked, it turns out there is a much simpler and more elegant way of creating this service.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\"language-javascript\"><code class=\"language-javascript\">&quot;use strict&quot;;\n\nfunction Service(meetupDataFN, twitterDataFN) {\n\treturn {\n        getNextMeetup: meetupDataFN,\n        getTweets: twitterDataFN\n    }\n}\n\nmodule.exports = Service;</code></pre>\n      </div>\n<p>In the current version of my service I am returning an object with two functions. Not only is this approach cleaner,\nit is also more functional. I am also just passing in functions instead of whole objects.</p>","frontmatter":{"title":"Dependency injection in Javascript without objects","date":"13.01.2016","category":null},"timeToRead":2}},"pageContext":{"slug":"/dependency-injection-in-javascript-without-objects","prev":{"fields":{"slug":"/next-jaxfusion-meeting-on-oct-3rd"},"frontmatter":{"title":"Next Jaxfusion meeting on Oct. 3rd","category":"Blog"}},"next":{"fields":{"slug":"/how-to-start-a-node-js-user-group"},"frontmatter":{"title":"How to Start a Node.js User Group","category":null}}}}